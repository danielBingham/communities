name: Release 

on:
  workflow_dispatch:
    inputs:
      version:
        decription: 'A semantic version to use when tagging this release.'
        required: true
jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:

      - name: Checkout Repo 
        uses: actions/checkout@v2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1 

      # Build and publish @communities/backend
      - name: Install Backend NPM Modules
        working-directory: ./packages/backend
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain communities --domain-owner 843012963492 --query authorizationToken --output text`
          npm ci

      - name: Run Backend Unit Tests
        working-directory: ./packages/backend
        run: |
          npm run test

      - name: Version the Backend Package
        working-directory: ./packages/backend
        run: |
          npm version ${{ github.event.inputs.version }}

      - name: Publish to AWS CodeArtifact 
        working-directory: ./packages/backend
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain communities --domain-owner 843012963492 --query authorizationToken --output text`
          npm publish
      
      # Build the worker docker container and push it to ECR 
      - name: Install Worker NPM Modules
        working-directory: ./worker
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain communities --domain-owner 843012963492 --query authorizationToken --output text`
          npm ci

      - name: Install updated backend version
        working-directory: ./worker
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain communities --domain-owner 843012963492 --query authorizationToken --output text`
          npm install @communities/backend@${{ github.event.inputs.version }}

      - name: Version the worker package
        working-directory: ./worker
        run: |
          npm version ${{ github.event.inputs.version }}

      - name: Build the Worker Docker Container
        working-directory: ./worker
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain communities --domain-owner 843012963492 --query authorizationToken --output text`
          docker build --secret id=CODEARTIFACT_AUTH_TOKEN -t 843012963492.dkr.ecr.us-east-1.amazonaws.com/communities/worker:${{ github.event.inputs.version }} . 

      - name: Login to ECR 
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 843012963492.dkr.ecr.us-east-1.amazonaws.com

      - name: Push the newly built container to the Repostory under the ${{ github.event.inputs.version }} tag
        run: |
          docker push 843012963492.dkr.ecr.us-east-1.amazonaws.com/communities/worker:${{ github.event.inputs.version }}

      # Test web-application, then build the docker container and push it to ECR
      - name: Install Web Application NPM Modules
        working-directory: ./web-application
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain communities --domain-owner 843012963492 --query authorizationToken --output text`
          npm ci

      - name: Install updated backend version
        working-directory: ./web-application
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain communities --domain-owner 843012963492 --query authorizationToken --output text`
          npm install @communities/backend@${{ github.event.inputs.version }}

      - name: Run Web Application Unit Tests
        working-directory: ./web-application
        run: | 
          npm run test

      - name: Version the web application
        working-directory: ./web-application
        run: |
          npm version ${{ github.event.inputs.version }}

      - name: Build the  Web Application Docker Container
        working-directory: ./web-application
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain communities --domain-owner 843012963492 --query authorizationToken --output text`
          docker build --secret id=CODEARTIFACT_AUTH_TOKEN -t 843012963492.dkr.ecr.us-east-1.amazonaws.com/communities/web-application:${{ github.event.inputs.version }} . 

      - name: Login to ECR 
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 843012963492.dkr.ecr.us-east-1.amazonaws.com

      - name: Push the newly built container to the Repostory under the ${{ github.event.inputs.version }} tag
        run: |
          docker push 843012963492.dkr.ecr.us-east-1.amazonaws.com/communities/web-application:${{ github.event.inputs.version }}

      # Commit the changes to the package.json package-lock.json files that
      # were made during versioning.
      - name: Commit the version changes
        run: |
          NAME=$( git log --format="%an" ${{ github.sha }}^! )
          EMAIL=$( git log --format="%ae" ${{ github.sha }}^! )
          git config --global user.name $NAME
          git config --global user.email $EMAIL
          git commit -am 'Version ${{ github.event.inputs.version }}'
          git push origin 
      - name: Tag the version
        run: |
          NAME=$( git log --format="%an" ${{ github.sha }}^! )
          EMAIL=$( git log --format="%ae" ${{ github.sha }}^! )
          git config --global user.name $NAME
          git config --global user.email $EMAIL
          git tag ${{ github.event.inputs.version }}
          git push origin --tags
          
