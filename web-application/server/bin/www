#!/usr/bin/env node

console.log('Beginning server bootstrapping...')

const { createCore } = require('../core')
const { createSessionParser } = require('../session')
const { createExpressApp } = require('../app')
const { createHTTPServer } = require('../httpServer')
const { createWebSocketServer } = require('../wsServer')

/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = function(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

createCore('web-application').then(function(core) {
  const sessionParser = createSessionParser(core)
  const app = createExpressApp(core, sessionParser)
  const server = createHTTPServer(core, app)
  const webSocketServer = createWebSocketServer(core, sessionParser, server)

  /**
   * Handle server shutdown
   */
  const shutdownServer = function() {
    core.logger.info('Attempting a graceful shutdown...')
    // Close the http server so we stop taking new connections before we close
    // down the resources needed to process those connections.
    server.close(async function() {
      // Now close down the resources needed to process the http connections.
      await core.shutdown()

      core.logger.info('Shutdown complete.')
      process.exit(0)
    })
  }
  process.on('SIGTERM', shutdownServer)
  process.on('SIGINT', shutdownServer)

  /**
   * Get port from environment and store in Express.
   */
  var port = normalizePort(process.env.PORT || '8080');
  app.set('port', port);

  /**
   * Listen on provided port, on all network interfaces.
   */
  core.logger.info(`Starting up the HTTP server:
    host: ${core.config.host}
    port: ${port}.
    version: ${process.env.npm_package_version}
  `)
  server.listen(port);
})
