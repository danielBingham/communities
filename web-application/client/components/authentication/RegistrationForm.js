import React, { useState, useEffect } from 'react'
import { useSelector } from 'react-redux'

import { useRequest } from '/lib/hooks/useRequest'
import { validateEmail, validateName, validateUsername, validatePassword } from '/lib/validation/user'

import { postUsers, getUsers } from '/state/User'

import Input from '/components/generic/input/Input'
import { Checkbox } from '/components/ui/Checkbox'

import './RegistrationForm.css'

const RegistrationForm = function(props) {

    const [ name, setName ] = useState('')
    const [ username, setUsername ] = useState('')
    const [ email, setEmail ] = useState('')
    const [ password, setPassword ] = useState('')
    const [ confirmPassword, setConfirmPassword ] = useState('')
    const [ ageConfirmation, setAgeConfirmation ] = useState(false)

    const [nameValidationError, setNameValidationError] = useState([])
    const [usernameValidationError, setUsernameValidationError] = useState([])
    const [emailValidationError, setEmailValidationError] = useState([])
    const [passwordValidationError, setPasswordValidationError] = useState([])
    const [confirmPasswordValidationError, setConfirmPasswordValidationError] = useState([])
    const [ageConfirmationValidationError, setAgeConfirmationValidationError] = useState([])

    const [request, makeRequest] = useRequest()
    const [usernameRequest, makeUsernameRequest] = useRequest()

    const existing = useSelector((state) => username in state.User.byUsername ? state.User.byUsername[username] : undefined)

    /**
     * Perform validation on our state and return a boolean indicating whether
     * our current state is valid.
     *
     * @param {string} field    (Optional) When included, we'll only validate
     * the named field.  If excluded, we'll validate all fields.
     *
     * @return {boolean}    True if our state (or the named field) is valid,
     * false otherwise.
     */
    const isValid = function(field) {
        let error = false 

        if ( ! field || field == 'name' ) {
            const nameErrors = validateName(name, true) 
            error = error || nameErrors.length > 0
            setNameValidationError(nameErrors)
        }

        if ( ! field || field == 'username' ) {
            const usernameErrors = validateUsername(username, true) 
            
            if ( existing && existing.username === username ) {
                usernameErrors.push('That username is already in use.  Please choose a different one.')
            }

            error = error || usernameErrors.length > 0
            setUsernameValidationError(usernameErrors)
        }

        if ( ! field || field == 'email' ) {
            const emailErrors = validateEmail(email, true) 
            error = error || emailErrors.length > 0
            setEmailValidationError(emailErrors)
        }

        if ( ! field || field == 'password' ) {
            const passwordErrors = validatePassword(password, true) 
            error = error || passwordErrors.length > 0
            setPasswordValidationError(passwordErrors)
        }

        if ( ! field || field =='confirmPassword' ) {
            const passwordConfirmationErrors = []

            if (password != confirmPassword) {
                passwordConfirmationErrors.push('Your passwords don\'t match!')
                error = true 
            } 

            setConfirmPasswordValidationError(passwordConfirmationErrors)
        }

        if ( ! field || field === 'ageConfirmation' ) {
            const ageConfirmationErrors = []

            if ( ageConfirmation !== true ) {
                ageConfirmationErrors.push('You must confirm your age.')
                error = true
            }

            setAgeConfirmationValidationError(ageConfirmationErrors)
        }

        return ! error
    }

    const onSubmit = function(event) {
        event.preventDefault()

        if ( ! isValid() ) {
            return 
        }

        const user = {
            name: name,
            username: username,
            email: email,
            password: password
        }

        makeRequest(postUsers(user))
    }

    const onNameChange = function(event) {
        let currentUsername = name.toLowerCase().replaceAll(/\s/g, '-')
        currentUsername = currentUsername.replaceAll(/[^a-zA-Z0-9\.\-_]/g, '')

        // When this is called, `event.target.value` will be the next value of
        // `title` and `title` will be the current value for it.  We only want
        // to update the `slug` if the user kept the `slug` as the
        // autogenerated one.  In other words, if we generate a slug from
        // `title` and it matches our current slug then we want to update our
        // current slug for the new value of title.  Otherwise, we don't want
        // to change it, because the user already customized it.
        if ( username == currentUsername) {
            let newUsername = event.target.value.toLowerCase().replaceAll(/\s/g, '-')
            newUsername = newUsername.replaceAll(/[^a-zA-Z0-9\.\-_]/g, '')
            setUsername(newUsername)
        }

        setName(event.target.value)
    }

    const onUsernameBlur = function(event) {
        makeUsernameRequest(getUsers(username, { username: username }))
        isValid('username')
    }

    useEffect(function() {
        if ( request && request.state == 'fulfilled' ) {
            window.location.href = "/"
        }
    }, [ request ])

    useEffect(function() {
        if ( usernameRequest && usernameRequest.state === 'fulfilled' ) {
            isValid('username')
        }
    }, [ usernameRequest])

    /**************************************************************************
     * Render
     * ************************************************************************/

    let baseError = null
    let nameError = nameValidationError.join(' ')
    let usernameError = usernameValidationError.join(' ')
    let emailError = emailValidationError.join(' ')
    let passwordError = passwordValidationError.join(' ')
    let confirmPasswordError = confirmPasswordValidationError.join(' ')
    let ageConfirmationError = ageConfirmationValidationError.join(' ')

    if ( request && request.state == 'failed' ) {
        baseError = (<div className="error">{ request.error.message }</div>)
    }

    return (
        <div className="registration-form">
            <div className="instructions">Welcome to Communities, please complete your registration!</div>
            <form onSubmit={onSubmit}>
                <Input
                    name="name"
                    label="Name"
                    explanation="The name people will see on your profile.  We strongly encourage you to use your real name, but we don't enforce that."
                    value={name}
                    className="name"
                    onBlur={ (event) => isValid('name') }
                    onChange={onNameChange} 
                    error={nameError}
                />
                <Input
                    name="username"
                    label="Username"
                    explanation="The unique username that will be used to link to your profile.  Can only contain letters, numbers, period ( . ), dash ( - ), or undercore ( _ )"
                    value={username}
                    className="username"
                    onBlur={ onUsernameBlur }
                    onChange={ (event) => setUsername(event.target.value) } 
                    error={usernameError}
                />
                <Input
                    name="email"
                    label="Email"
                    explanation="The email you will use to log in.  Will also receive notifications and will be used to reset your password if you forget it."
                    value={email}
                    className="email"
                    onBlur={ (event) => isValid('email') }
                    onChange={ (event) => setEmail(event.target.value) } 
                    error={emailError}
                />

                <Input
                    name="password"
                    type="password"
                    label="Password"
                    explanation="The password you will use to log in. Must be at least 16 characters long.  We recommend using the passphrase approach and/or using a password manager."
                    value={password}
                    className="password"
                    onBlur={ (event) => isValid('password') }
                    onChange={ (event) => setPassword(event.target.value) } 
                    error={passwordError}
                />
                <Input
                    name="confirmPassword"
                    type="password"
                    label="Confirm Password"
                    explanation="Please enter your password again to confirm it."
                    value={confirmPassword}
                    className="confirm-password"
                    onBlur={ (event) => isValid('confirmPassword') }
                    onChange={ (event) => setConfirmPassword(event.target.value) }
                    error={confirmPasswordError}
                />
                <Checkbox
                    name="age-confirmation"
                    label="Confirm Your Age"
                    value={ageConfirmation}
                    explanation="Due to legal restrictions, you must be at least 18 years old to register for Communities. By checking this box you confirm that you are at least 18 years old." 
                    onClick={(e) => setAgeConfirmation( ! ageConfirmation)}
                    error={ageConfirmationError}
                />
                <div className="base-error">
                    { baseError }
                </div>
                <div className="submit field-wrapper">
                    <input type="submit" name="register" value="Sign Up" />
                </div>

            </form>
        </div>
    )
}

export default RegistrationForm
