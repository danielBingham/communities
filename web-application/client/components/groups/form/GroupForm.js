import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'

import { GlobeAltIcon, LockOpenIcon, LockClosedIcon, UserCircleIcon } from '@heroicons/react/24/outline'

import { useLocalStorage } from '/lib/hooks/useLocalStorage'
import { useRequest } from '/lib/hooks/useRequest'

import { postGroups } from '/state/groups'

import DraftImageFile from '/components/files/DraftImageFile'
import FileUploadInput from '/components/files/FileUploadInput'

import Button from '/components/generic/button/Button'
import Input from '/components/generic/input/Input'
import TextBox from '/components/generic/text-box/TextBox'
import Spinner from '/components/Spinner'

import './GroupForm.css'

const GroupForm = function() {

    const [ title, setTitle ] = useLocalStorage('group.draft.title', '')
    const [ slug, setSlug ] = useLocalStorage('group.draft.slug', '')
    const [ type, setType ] = useLocalStorage('group.draft.type', 'private')
    const [ about, setAbout ] = useLocalStorage('group.draft.about', '')
    const [ fileId, setFileId] = useLocalStorage('group.draft.fileId', null)

    const [ titleErrors, setTitleErrors ] = useState([]) 
    const [ slugErrors, setSlugErrors ] = useState([])
    const [ typeErrors, setTypeErrors ] = useState([])
    const [ aboutErrors, setAboutErrors ] = useState([])

    const [request, makeRequest] = useRequest()

    const validate = function(field) {

        let titleValidationErrors = []
        if ( ! field || field == 'title' ) {
            if ( title.length <= 0 ) {
                titleValidationErrors.push('Title is required.')
            } else if ( title.length >= 1024) {
                titleValidationErrors.push('Title must be less than 1024 characters.')
            }
            setTitleErrors(titleValidationErrors)
        }

        let slugValidationErrors = []
        if ( ! field || field == 'slug' ) {
            if ( slug.length <= 0 ) {
                slugValidationErrors.push('URL is required.')
            } else if ( slug.length >= 1024) {
                slugValidationErrors.push('URL must be less than 1024 characters.')
            } else if ( slug.match(/^[a-zA-Z0-9\.\-_]+$/) === null ) {
                slugValidationErrors.push(`URL may only contain letters, numbers, '.', '-', or '_'.`)
            }
            setSlugErrors(slugValidationErrors)
        }

        let aboutValidationErrors = []
        if ( ! field || field == 'about' ) {
            if ( about.length >= 10000) {
                aboutValidationErrors.push('About must be less than 10,000 characters.')
            }
            setAboutErrors(aboutValidationErrors)
        }

        let typeValidationErrors = []
        if ( ! field || field == 'type' ) {
            if ( type !== 'open' && type !== 'private' && type !== 'hidden' ) {
                typeValidationErrors.push(`Type must be one of 'open', 'private', or 'hidden'.`)
            }
            setTypeErrors(typeValidationErrors)
        }

        return titleValidationErrors.length == 0 
            && slugValidationErrors.length == 0 
            && aboutValidationErrors == 0 
            && typeValidationErrors == 0
    }

    const onSubmit = function(event) {
        event.preventDefault()

        if ( ! validate() ) {
            return
        }

        const group = {
            type: type,
            title: title,
            slug: slug,
            about: about,
            fileId: fileId
        }

        makeRequest(postGroups(group))
    }

    const cancel = function(event) {
        setTitle(null)
        setType(null)
        setSlug(null)
        setAbout(null)
        setFileId(null)

        navigate('/groups')
    }

    const onTitleChange = function(event) {
        let currentSlug = title.toLowerCase().replaceAll(/\s/g, '-')
        currentSlug = currentSlug.replaceAll(/[^a-zA-Z0-9\.\-_]/g, '')

        // When this is called, `event.target.value` will be the next value of
        // `title` and `title` will be the current value for it.  We only want
        // to update the `slug` if the user kept the `slug` as the
        // autogenerated one.  In other words, if we generate a slug from
        // `title` and it matches our current slug then we want to update our
        // current slug for the new value of title.  Otherwise, we don't want
        // to change it, because the user already customized it.
        if ( slug == currentSlug) {
            let newSlug = event.target.value.toLowerCase().replaceAll(/\s/g, '-')
            newSlug = newSlug.replaceAll(/[^a-zA-Z0-9\.\-_]/g, '')
            setSlug(newSlug)
        }

        setTitle(event.target.value)
    }

    const navigate = useNavigate()
    useEffect(() => {
        if ( request && request.state == 'fulfilled') {
            setTitle(null)
            setType(null)
            setSlug(null)
            setAbout(null)
            setFileId(null)
   
            navigate(`/group/${encodeURIComponent(request.response.body.entity.slug)}`)
        }
    }, [ request ])

    let baseError = null 
    let titleError = titleErrors.join(' ')
    let slugError = slugErrors.join(' ')
    let typeError = typeErrors.join(' ')
    let aboutError = aboutErrors.join(' ')

    const inProgress = request && request.state == 'pending'

    if ( request && request.state == 'failed' ) {
        if ( request.error && request.error.type == 'invalid' ) {
            baseError = request.error.message
        } else if ( request.error && request.error.type == 'conflict' ) {
            baseError = request.error.message
            slugError += 'A group with this URL already exists.' 
        }
    }

    return (
        <form onSubmit={onSubmit} className="group-form">
            <div className="group-form__instructions">What group would you like to create?</div>
            <div className="group-form__group-image">
                <div>
                    { ! fileId && <UserCircleIcon className="placeholder" /> }
                    { fileId && <DraftImageFile fileId={fileId} setFileId={setFileId} width={150} deleteOnRemove={false} /> }
                    { ! fileId && <FileUploadInput 
                        fileId={fileId}
                        setFileId={setFileId} 
                        types={[ 'image/jpeg', 'image/png' ]} 
                    /> }
                </div>
            </div>
            <Input
                name="title"
                label="Title"
                explanation="Give this group a title."
                value={title}
                className="title"
                onBlur={ (event) => validate('title') }
                onChange={onTitleChange} 
                error={titleError}
            />

            <Input
                name="slug"
                label="URL"
                explanation="Give this group a URL.  This will be used to access the group page and should match the group title. Must be composed of letters, numbers, '.', '_', and '-'."
                value={slug}
                className="slug"
                onBlur={ (event) => validate('slug') }
                onChange={ (event) => setSlug(event.target.value) } 
                error={slugError}
            />
            <TextBox
                name="about"
                className="about"
                label="About"
                explanation={`Enter a description of this group.  This should include a description of the group's purpose, it's rules, and what sort of content is appropriate for this group.`}
                value={about}
                onChange={(event) => setAbout(event.target.value)}
                error={aboutError}
            />
            <div className="group-form__type">
                <div className="group-form__type-errors">{ typeError }</div>
                <div className="group-form__types">
                    <div className="type-option">
                        <input 
                            type="radio" 
                            name="type" 
                            checked={ type == 'open' }
                            onChange={(e) => setType('open')}
                            value="open" />
                        <label htmlFor="open" onClick={(e) => setType('open')}><GlobeAltIcon/>Open</label>
                        <div className="explanation">An open group.  Anyone may add themselves and all posts in the group are public.</div>
                    </div>
                    <div className="type-option">
                        <input 
                            type="radio" 
                            name="type" 
                            checked={ type == 'private' }
                            onChange={(e) => setType('private')}
                            value="private" />
                        <label htmlFor="private" onClick={(e) => setType('private')}><LockOpenIcon/>Private</label>
                        <div className="explanation">A private group. Anyone can see that the group exists, its title and description.  People may request to be added or may be invited by admins and moderators. Posts are only visible to approved group members.</div>
                    </div>
                    <div className="type-option">
                        <input 
                            type="radio" 
                            name="type" 
                            checked={ type == 'hidden' }
                            onChange={(e) => setType('hidden')}
                            value="hidden" />
                        <label htmlFor="hidden" onClick={(e) => setType('hidden')}><LockClosedIcon/> Hidden</label>
                        <div className="explanation">A hidden group.  Only members and invitees can even see that it exists.  All posts are private and visible to members only.  New members must be invited by admins and moderators.</div>
                    </div>
                </div>
            </div>
            <div className="group-form__errors">{ baseError }</div>
            { inProgress && <Spinner /> }
            { ! inProgress && <div className="buttons">
                <Button type="secondary-warn" onClick={(e) => cancel()}>Cancel</Button> 
                <input type="submit" name="submit" value="Submit" />
            </div> }
        </form>
    )

}

export default GroupForm
